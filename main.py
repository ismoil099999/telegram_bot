import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import ParseMode, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils import executor
from datetime import datetime
import openpyxl
import asyncio

# –¢–∞–Ω–∑–∏–º–∏ –±–æ—Ç
TOKEN = "7522856876:AAG4h3FtTHEVQ9zfHpQV8pPWk7G-oMyP47Y"
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

logging.basicConfig(level=logging.INFO)

# –ò—Å—Ç–∏—Ñ–æ–¥–∞–±–∞—Ä–∞–Ω–¥–∞–∏ –ê–¥–º–∏–Ω –≤–∞ —Ä”Ø–π—Ö–∞—Ç–∏ –∫–æ—Ä–±–∞—Ä–æ–Ω
ADMIN_USER_ID = 7983949632
USER_LIST = [6816678410, 987654321]

tasks = []
user_task_times = {}

# –≠“∑–æ–¥–∏ —Ñ–∞–π–ª –±–∞—Ä–æ–∏ —Å–∞–±—Ç–∏ –≤–∞–∑–∏—Ñ–∞“≥–æ
wb = openpyxl.Workbook()
sheet = wb.active
sheet.title = "–í–∞–∑–∏—Ñ–∞“≥–æ"
sheet.append(["–ò—Å—Ç–∏—Ñ–æ–¥–∞–±–∞—Ä–∞–Ω–¥–∞", "–í–∞–∑–∏—Ñ–∞", "–°–∞–Ω–∞", "–°–æ–∞—Ç", "–í–∞“õ—Ç–∏ –æ“ì–æ–∑", "–í–∞“õ—Ç–∏ –∞–Ω“∑–æ–º"])

# –§–∞—Ä–º–æ–Ω–∏ /start
@dp.message_handler(commands=["start"])
async def start_command(message: types.Message):
    if message.from_user.id == ADMIN_USER_ID:
        await message.answer("–°–∞–ª–æ–º, –ê–¥–º–∏–Ω! –ë–∞—Ä–æ–∏ —Ñ–∏—Ä–∏—Å—Ç–æ–¥–∞–Ω–∏ —Ö–∞–±–∞—Ä, —Ñ–∞—Ä–º–æ–Ω–∏ /send_message-—Ä–æ –∏—Å—Ç–∏—Ñ–æ–¥–∞ –±–∞—Ä–µ–¥.")
    else:
        today = datetime.now().strftime("%d-%m-%Y")
        current_time = datetime.now().strftime("%H:%M")
        today_tasks = [task for task in tasks if task["date"] == today and task["time"] >= current_time]
        
        if today_tasks:
            task_texts = "\n\n".join([f"üìù {task['text']} ({task['time']})" for task in today_tasks])
            await message.answer(f"–°–∞–ª–æ–º! –í–∞–∑–∏—Ñ–∞“≥–æ–∏ –∏–º—Ä”Ø–∑:\n\n{task_texts}")
        else:
            await message.answer("–°–∞–ª–æ–º! –ò–º—Ä”Ø–∑ –≤–∞–∑–∏—Ñ–∞ –≤—É“∑—É–¥ –Ω–∞–¥–æ—Ä–∞–¥.")

# –§–∞—Ä–º–æ–Ω–∏ /send_message –±–∞—Ä–æ–∏ —Ñ–∏—Ä–∏—Å—Ç–æ–¥–∞–Ω–∏ –≤–∞–∑–∏—Ñ–∞“≥–æ
@dp.message_handler(commands=["send_message"])
async def send_message_to_user(message: types.Message):
    if message.from_user.id != ADMIN_USER_ID:
        return

    parts = message.text.replace("/send_message", "").strip().split("|")
    if len(parts) < 3:
        await message.answer("–õ—É—Ç—Ñ–∞–Ω, –≤–∞–∑–∏—Ñ–∞—Ä–æ —á—É–Ω–∏–Ω –Ω–∞–≤–∏—Å–µ–¥: /send_message [–º–∞—Ç–Ω–∏ –≤–∞–∑–∏—Ñ–∞] | [—Å–∞–Ω–∞ dd-mm-yyyy] | [—Å–æ–∞—Ç hh:mm]")
        return

    task_text, task_date, task_time = parts[0].strip(), parts[1].strip(), parts[2].strip()
    
    tasks.append({"text": task_text, "date": task_date, "time": task_time})
    
    full_message = f"üìÖ –°–∞–Ω–∞: {task_date}\n‚è∞ –°–æ–∞—Ç: {task_time}\nüìù –í–∞–∑–∏—Ñ–∞: {task_text}"
    for user_id in USER_LIST:
        markup = InlineKeyboardMarkup().add(
            InlineKeyboardButton("–ò“∑—Ä–æ –∫–∞—Ä–¥–∞–Ω", callback_data=f"execute_task_{user_id}_{task_date}_{task_time}")
        )
        await bot.send_message(user_id, full_message, reply_markup=markup)

    await message.answer("–•–∞–±–∞—Ä –±–∞ –∏—Å—Ç–∏—Ñ–æ–¥–∞–±–∞—Ä–∞–Ω–¥–∞–≥–æ–Ω —Ñ–∏—Ä–∏—Å—Ç–æ–¥–∞ —à—É–¥.")

# –ò“∑—Ä–æ –∫–∞—Ä–¥–∞–Ω–∏ –≤–∞–∑–∏—Ñ–∞
@dp.callback_query_handler(lambda c: c.data.startswith('execute_task_'))
async def execute_task(callback_query: types.CallbackQuery):
    _, user_id, task_date, task_time = callback_query.data.split("_")
    user_id = int(user_id)
    
    if callback_query.from_user.id != user_id:
        return await bot.answer_callback_query(callback_query.id, text="–ò–Ω –≤–∞–∑–∏—Ñ–∞ –±–∞ —à—É–º–æ —Ç–∞–∞–ª–ª—É“õ –Ω–∞–¥–æ—Ä–∞–¥.")
    
    start_time = datetime.now().strftime("%H:%M:%S")
    user_task_times[user_id] = {"start": start_time, "task_date": task_date, "task_time": task_time}
    
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(user_id, f"‚úÖ –í–∞–∑–∏—Ñ–∞ –æ“ì–æ–∑ —à—É–¥!\n–í–∞“õ—Ç–∏ –æ“ì–æ–∑: {start_time}")

    markup = InlineKeyboardMarkup().add(
        InlineKeyboardButton("–ê–Ω“∑–æ–º –¥–æ–¥–∞–Ω", callback_data=f"complete_task_{user_id}_{task_date}_{task_time}")
    )
    await bot.send_message(user_id, "–í–∞–∑–∏—Ñ–∞ –∏“∑—Ä–æ —à—É–¥–∞ –∏—Å—Ç–æ–¥–∞–∞—Å—Ç. –ë–∞—Ä–æ–∏ –∞–Ω“∑–æ–º –¥–æ–¥–∞–Ω, '–ê–Ω“∑–æ–º –¥–æ–¥–∞–Ω'-—Ä–æ –ø–∞—Ö—à –∫—É–Ω–µ–¥.", reply_markup=markup)

# –ê–Ω“∑–æ–º–∏ –≤–∞–∑–∏—Ñ–∞
@dp.callback_query_handler(lambda c: c.data.startswith('complete_task_'))
async def complete_task(callback_query: types.CallbackQuery):
    _, user_id, task_date, task_time = callback_query.data.split("_")
    user_id = int(user_id)
    
    if callback_query.from_user.id != user_id:
        return await bot.answer_callback_query(callback_query.id, text="–ò–Ω –≤–∞–∑–∏—Ñ–∞ –±–∞ —à—É–º–æ —Ç–∞–∞–ª–ª—É“õ –Ω–∞–¥–æ—Ä–∞–¥.")

    end_time = datetime.now().strftime("%H:%M:%S")
    start_time = user_task_times[user_id].get("start", "–ù–æ–º–∞—ä–ª—É–º –≤–∞“õ—Ç")
    
    username = callback_query.from_user.full_name
    
    sheet.append([username, task_text, task_date, task_time, start_time, end_time])
    wb.save("vazifaho.xlsx")

    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(user_id, f"‚úÖ –í–∞–∑–∏—Ñ–∞ –∞–Ω“∑–æ–º —à—É–¥!\n–û“ì–æ–∑: {start_time}\n–ê–Ω“∑–æ–º: {end_time}")

# –§–∞—Ä–º–æ–Ω–∏ /delete_task –±–∞—Ä–æ–∏ –Ω–µ—Å—Ç –∫–∞—Ä–¥–∞–Ω–∏ –≤–∞–∑–∏—Ñ–∞
@dp.message_handler(commands=["delete_task"])
async def delete_task(message: types.Message):
    if message.from_user.id != ADMIN_USER_ID:
        return

    parts = message.text.replace("/delete_task", "").strip().split("|")
    if len(parts) < 2:
        await message.answer("–õ—É—Ç—Ñ–∞–Ω, –≤–∞–∑–∏—Ñ–∞—Ä–æ —á—É–Ω–∏–Ω –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥: /delete_task [—Å–∞–Ω–∞ dd-mm-yyyy] | [—Å–æ–∞—Ç hh:mm]")
        return
    
    task_date, task_time = parts[0].strip(), parts[1].strip()
    
    global tasks
    tasks = [task for task in tasks if not (task["date"] == task_date and task["time"] == task_time)]
    
    await message.answer("‚úÖ –í–∞–∑–∏—Ñ–∞ –Ω–µ—Å—Ç –∫–∞—Ä–¥–∞ —à—É–¥.")
    for user_id in USER_LIST:
        await bot.send_message(user_id, f"‚ùå –í–∞–∑–∏—Ñ–∞ ({task_date} {task_time}) –±–µ–∫–æ—Ä –∫–∞—Ä–¥–∞ —à—É–¥.")

# –û“ì–æ–∑–∏ –±–æ—Ç
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
